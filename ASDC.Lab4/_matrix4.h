#pragma once

template<typename T>
/// <summary>
/// Представляет строго типизированный четырёхмерный массив объектов, доступных по индексу.
/// </summary>
class _matrix4
{
public:
	/// <summary>
	/// Возвращает или задает элемент по указанным индексам.
	/// </summary>
	/// <param name='i1'>Первый индекс элемента, который необходимо получить или задать.</param>
	/// <param name='i2'>Второй индекс элемента, который необходимо получить или задать.</param>
	/// <param name='i3'>Третий индекс элемента, который необходимо получить или задать.</param>
	/// <param name='i4'>Четвёртый индекс элемента, который необходимо получить или задать.</param>
	/// <returns>Элемент, расположенный по указанному индексу.</returns>
	virtual T& at(int i1, int i2, int i3, int i4) = 0;

	/// <summary>
	/// Получает общее число элементов во всех измерениях массива <see cref="matrix4"/>.
	/// </summary>
	virtual size_t getLength() = 0;

	/// <summary>
	/// Возвращает число, представляющее количество элементов в заданном измерении массива <see cref="_matrix4"/>.
	/// </summary>
	/// <param name='dimension'>Измерение массива <see cref="_matrix4"/>, индексация которого начинается с единицы, для которого требуется определить длину.</param>
	/// <returns>32-битовое целое число без знака, представляющее количество элементов в заданном измерении.</returns>
	virtual int getLength(int dimension) = 0;

	/// <summary>
	/// Возвращает число, представляющее количество операций сложения при вычислении адреса элемента.
	/// </summary>
	/// <returns>32-битовое целое число без знака, представляющее количество операций сложения при вычислении адреса элемента.</returns>
	virtual int getAddCount() = 0;

	/// <summary>
	/// Возвращает число, представляющее количество операций умножения при вычислении адреса элемента.
	/// </summary>
	/// <returns>32-битовое целое число без знака, представляющее количество операций умножения при вычислении адреса элемента.</returns>
	virtual int getMulCount() = 0;

	/// <summary>
	/// Получает индекс первого элемента заданного измерения в массиве.
	/// </summary>
	/// <param name='dimension'>Измерение массива, индексация которого начинается с единицы, для которого необходимо определить нижнюю границу.</param>
	/// <returns>Индекс первого элемента заданного измерения в массиве.</returns>
	virtual int getLowerBound(int dimension) = 0;

	/// <summary>
	/// Получает индекс последнего элемента заданного измерения в массиве.
	/// </summary>
	/// <param name='dimension'>Измерение массива, индексация которого начинается с единицы, для которого необходимо определить верхнюю границу.</param>
	/// <returns>Индекс последнего элемента указанного измерения в массиве.</returns>
	virtual int getUpperBound(int dimension) = 0;
};
